// ========================================================================================================
// B√öSQUEDA POR HASH - B√∫squeda Ultra R√°pida Usando Tabla Hash
// ========================================================================================================
// La B√∫squeda por Hash usa una "funci√≥n hash" para calcular directamente d√≥nde deber√≠a
// estar un elemento, permitiendo b√∫squedas en tiempo casi constante O(1).
//
// ANALOG√çA: Imagina una biblioteca donde cada libro tiene un c√≥digo (ISBN).
// En lugar de buscar libro por libro, el c√≥digo te dice EXACTAMENTE en qu√© estante est√°.
// Solo vas directo a ese estante y lo tomas. ¬°S√∫per r√°pido!
//
// C√ìMO FUNCIONA:
// 1. Creamos una "tabla hash" (diccionario) que mapea cada n√∫mero a su posici√≥n
// 2. Para buscar, simplemente consultamos el diccionario: "¬øD√≥nde est√° el n√∫mero X?"
// 3. El diccionario responde instant√°neamente con la posici√≥n (o dice "no existe")
//
// REQUISITO: NO requiere que el arreglo est√© ordenado
//
// COMPLEJIDAD:
// - Mejor caso: O(1) - acceso directo
// - Caso promedio: O(1) - casi siempre es inmediato
// - Peor caso: O(n) - cuando hay muchas "colisiones" (muy raro con buenas funciones hash)
//
// VENTAJAS:
// - RAPID√çSIMO para b√∫squedas (O(1) en promedio)
// - No requiere arreglo ordenado
// - Ideal cuando har√°s MUCHAS b√∫squedas en el mismo arreglo
// DESVENTAJAS:
// - Usa memoria extra O(n) para la tabla hash
// - Hay un costo inicial de construir la tabla hash
// - No mantiene el orden de los elementos
// - No es eficiente si solo vas a hacer UNA b√∫squeda

using System;
using System.Collections.Generic;

namespace MetodosAlgoritmicosyBusqueda
{
    // Esta clase implementa la interfaz ISearcher
    public class HashSearcher : ISearcher
    {
        // Propiedad Name - Devuelve el nombre del algoritmo para mostrarlo en el men√∫
        public string Name => "B√∫squeda por Hash (Tabla Hash)";

        // Propiedad RequiresSorted - NO requiere que el arreglo est√© ordenado
        // ¬°Esta es una gran ventaja del hash!
        public bool RequiresSorted => false;

        // ================================================================================================
        // M√âTODO SEARCH - Busca un elemento usando una Tabla Hash
        // ================================================================================================
        // Par√°metros:
        // - arr: el arreglo donde buscar (NO necesita estar ordenado)
        // - target: el n√∫mero que queremos encontrar
        //
        // Retorna:
        // - El √≠ndice donde se encuentra el elemento (0, 1, 2, ...)
        // - -1 si el elemento no existe en el arreglo
        public int Search(int[] arr, int target)
        {
            Console.WriteLine("\nüîç B√∫squeda por Hash");
            Console.WriteLine("Este algoritmo crea una tabla hash para acceso instant√°neo.");

            // Validaci√≥n: verificar que el arreglo no est√© vac√≠o
            if (arr.Length == 0)
            {
                Console.WriteLine("‚ùå El arreglo est√° vac√≠o.");
                return -1;
            }

            // ========================================================================================
            // FASE 1: CONSTRUIR LA TABLA HASH
            // ========================================================================================
            // Dictionary<int, int> es una "tabla hash" o "diccionario" en C#.
            // Es una estructura de datos que mapea "claves" a "valores":
            //   - Clave (key): el n√∫mero del arreglo
            //   - Valor (value): la posici√≥n (√≠ndice) donde se encuentra
            //
            // Ejemplo: Si arr = [50, 20, 30]
            // La tabla hash ser√°:
            //   50 ‚Üí 0  (50 est√° en el √≠ndice 0)
            //   20 ‚Üí 1  (20 est√° en el √≠ndice 1)
            //   30 ‚Üí 2  (30 est√° en el √≠ndice 2)
            //
            // Dictionary usa internamente una funci√≥n hash para almacenar y recuperar
            // los datos de forma ultra r√°pida (O(1)).

            Console.WriteLine("\n--- FASE 1: Construyendo tabla hash ---");
            
            var hashTable = new Dictionary<int, int>();
            
            // Recorrer el arreglo y agregar cada elemento a la tabla hash
            for (int i = 0; i < arr.Length; i++)
            {
                // ¬øQU√â PASA SI HAY DUPLICADOS?
                // Si el mismo n√∫mero aparece varias veces, guardamos el √≠ndice de la PRIMERA aparici√≥n.
                // ContainsKey() verifica si la clave ya existe en el diccionario.
                if (!hashTable.ContainsKey(arr[i]))
                {
                    // Agregar: clave = arr[i], valor = i
                    hashTable[arr[i]] = i;
                    
                    if (VisualizationHelper.ShowStepByStep)
                    {
                        Console.WriteLine($"   Agregando a tabla: {arr[i]} ‚Üí √≠ndice {i}");
                    }
                }
                else
                {
                    // Si ya existe, no lo agregamos de nuevo
                    if (VisualizationHelper.ShowStepByStep)
                    {
                        Console.WriteLine($"   {arr[i]} ya existe en la tabla (√≠ndice {hashTable[arr[i]]}), ignorando duplicado");
                    }
                }
            }

            Console.WriteLine($"\n‚úì Tabla hash construida con {hashTable.Count} entradas √∫nicas.");
            
            if (VisualizationHelper.ShowStepByStep)
            {
                Console.WriteLine("\nContenido de la tabla hash:");
                foreach (var kvp in hashTable)
                {
                    Console.WriteLine($"   {kvp.Key} ‚Üí √≠ndice {kvp.Value}");
                }
                VisualizationHelper.WaitForUser();
            }

            // ========================================================================================
            // FASE 2: BUSCAR EN LA TABLA HASH
            // ========================================================================================
            Console.WriteLine($"\n--- FASE 2: Buscando {target} en la tabla hash ---");

            // ContainsKey() verifica si la clave (target) existe en el diccionario
            // Esta operaci√≥n es O(1) - ¬°instant√°nea!
            if (hashTable.ContainsKey(target))
            {
                // ¬°ENCONTRADO!
                // Recuperar el √≠ndice asociado al target
                int index = hashTable[target];
                
                Console.ForegroundColor = ConsoleColor.Green;
                Console.WriteLine($"‚úì ¬°ENCONTRADO INSTANT√ÅNEAMENTE!");
                Console.ResetColor();
                Console.WriteLine($"   N√∫mero: {target}");
                Console.WriteLine($"   √çndice: {index}");
                Console.WriteLine($"   Valor en arr[{index}]: {arr[index]}");
                
                Console.WriteLine("\nüìä Estad√≠sticas:");
                Console.WriteLine($"   Accesos a la tabla hash: 1 (b√∫squeda directa)");
                Console.WriteLine($"   Complejidad: O(1) - ¬°tiempo constante!");
                
                return index;
            }
            else
            {
                // NO ENCONTRADO
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine($"‚úó NO ENCONTRADO");
                Console.ResetColor();
                Console.WriteLine($"   El n√∫mero {target} no existe en el arreglo.");
                
                Console.WriteLine("\nüìä Estad√≠sticas:");
                Console.WriteLine($"   Accesos a la tabla hash: 1 (b√∫squeda directa)");
                Console.WriteLine($"   Complejidad: O(1) - ¬°tiempo constante!");
                
                return -1;
            }
        }
    }
}

// ========================================================================================================
// NOTAS ADICIONALES SOBRE HASH
// ========================================================================================================
//
// ¬øQU√â ES UNA FUNCI√ìN HASH?
// Una funci√≥n hash convierte un dato (como un n√∫mero o texto) en un √≠ndice de la tabla.
// Por ejemplo: hash(50) = 3, hash(20) = 7, etc.
// C# hace esto autom√°ticamente en Dictionary<>.
//
// ¬øQU√â SON LAS COLISIONES?
// Una colisi√≥n ocurre cuando dos n√∫meros diferentes producen el mismo hash.
// Por ejemplo: si hash(50) = 3 y hash(80) = 3, hay colisi√≥n.
// Dictionary<> de C# maneja esto autom√°ticamente usando t√©cnicas como "chaining".
//
// CU√ÅNDO USAR B√öSQUEDA POR HASH:
// ‚úì Cuando har√°s MUCHAS b√∫squedas en el mismo arreglo
// ‚úì Cuando la velocidad es cr√≠tica
// ‚úì Cuando tienes memoria suficiente para la tabla hash
//
// CU√ÅNDO NO USARLA:
// ‚úó Si solo har√°s UNA b√∫squeda (el costo de construir la tabla no vale la pena)
// ‚úó Si la memoria es limitada
// ‚úó Si necesitas mantener el orden de los elementos
//
// ========================================================================================================
