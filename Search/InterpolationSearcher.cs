// ========================================================================================================
// B√öSQUEDA POR INTERPOLACI√ìN - B√∫squeda Mejorada para Datos Uniformemente Distribuidos
// ========================================================================================================
// La B√∫squeda por Interpolaci√≥n es similar a la B√∫squeda Binaria, pero en lugar de siempre
// dividir el arreglo por la mitad, "adivina" d√≥nde podr√≠a estar el elemento bas√°ndose en su valor.
//
// ANALOG√çA: Imagina que buscas una palabra en un diccionario.
// - Si buscas "Manzana", abres el diccionario m√°s o menos por la mitad
// - Si buscas "Abeja", abres cerca del inicio
// - Si buscas "Zebra", abres cerca del final
// ¬°No siempre abres exactamente en la mitad! Usas el valor para estimar d√≥nde buscar.
//
// REQUISITO: El arreglo DEBE estar ordenado (como la B√∫squeda Binaria)
//
// COMPLEJIDAD:
// - Mejor caso: O(1) - encuentra el elemento inmediatamente
// - Caso promedio (datos uniformes): O(log log n) - ¬°m√°s r√°pido que Binaria!
// - Peor caso (datos agrupados): O(n) - puede ser lento si los datos no son uniformes
//
// VENTAJAS:
// - Muy r√°pida cuando los datos est√°n uniformemente distribuidos
// - Usa menos comparaciones que B√∫squeda Binaria en promedio
// DESVENTAJAS:
// - Requiere arreglo ordenado
// - Puede ser lenta si los datos tienen muchos duplicados o est√°n agrupados
// - M√°s compleja de implementar que B√∫squeda Binaria

using System;

namespace MetodosAlgoritmicosyBusqueda
{
    // Esta clase implementa la interfaz ISearcher
    public class InterpolationSearcher : ISearcher
    {
        // Propiedad Name - Devuelve el nombre del algoritmo para mostrarlo en el men√∫
        public string Name => "B√∫squeda por Interpolaci√≥n";

        // Propiedad RequiresSorted - Indica que el arreglo DEBE estar ordenado
        // La interpolaci√≥n solo funciona correctamente con datos ordenados
        public bool RequiresSorted => true;

        // Contador de comparaciones para fines educativos
        private int comparisons = 0;

        // ================================================================================================
        // M√âTODO SEARCH - Busca un elemento usando B√∫squeda por Interpolaci√≥n
        // ================================================================================================
        // Par√°metros:
        // - arr: el arreglo donde buscar (DEBE estar ordenado)
        // - target: el n√∫mero que queremos encontrar
        //
        // Retorna:
        // - El √≠ndice donde se encuentra el elemento (0, 1, 2, ...)
        // - -1 si el elemento no existe en el arreglo
        public int Search(int[] arr, int target)
        {
            // Reiniciar contador
            comparisons = 0;

            Console.WriteLine("\nüîç B√∫squeda por Interpolaci√≥n");
            Console.WriteLine("Este algoritmo 'adivina' la posici√≥n del elemento bas√°ndose en su valor.");

            // Validaci√≥n: verificar que el arreglo no est√© vac√≠o
            if (arr.Length == 0)
            {
                Console.WriteLine("‚ùå El arreglo est√° vac√≠o.");
                return -1;
            }

            // √çndices del rango de b√∫squeda
            int low = 0;                // √çndice inicial
            int high = arr.Length - 1;  // √çndice final

            // ========================================================================================
            // BUCLE DE B√öSQUEDA
            // ========================================================================================
            // Continuamos mientras:
            // 1. El rango sea v√°lido (low <= high)
            // 2. El valor buscado est√© dentro del rango de valores posibles
            //
            // ¬øPor qu√© verificar target >= arr[low] && target <= arr[high]?
            // Si el target est√° fuera de este rango, sabemos que NO existe en el arreglo
            // porque el arreglo est√° ordenado.
            while (low <= high && target >= arr[low] && target <= arr[high])
            {
                // CASO ESPECIAL: Si low == high, solo hay un elemento en el rango
                if (low == high)
                {
                    comparisons++;
                    if (arr[low] == target)
                    {
                        Console.WriteLine($"‚úì Encontrado en la posici√≥n {low} (√∫nico elemento en el rango)");
                        Console.WriteLine($"üìä Comparaciones realizadas: {comparisons}");
                        return low;
                    }
                    else
                    {
                        Console.WriteLine($"‚úó No encontrado. Comparaciones: {comparisons}");
                        return -1;
                    }
                }

                // ========================================================================================
                // F√ìRMULA DE INTERPOLACI√ìN - El "Coraz√≥n" del Algoritmo
                // ========================================================================================
                // Esta f√≥rmula estima d√≥nde podr√≠a estar el elemento bas√°ndose en su valor.
                //
                // La f√≥rmula es:
                // pos = low + ((target - arr[low]) * (high - low)) / (arr[high] - arr[low])
                //
                // EXPLICACI√ìN INTUITIVA:
                // - (target - arr[low]) / (arr[high] - arr[low]) = qu√© fracci√≥n del rango de VALORES es target
                // - (high - low) = tama√±o del rango de √çNDICES
                // - Multiplicamos la fracci√≥n por el tama√±o para obtener la posici√≥n estimada
                //
                // EJEMPLO:
                // Arreglo: [10, 20, 30, 40, 50]  (√≠ndices 0-4)
                // Buscamos: 35
                // low=0, high=4, arr[low]=10, arr[high]=50
                // 
                // (35 - 10) / (50 - 10) = 25/40 = 0.625  (35 est√° al 62.5% del rango de valores)
                // 0.625 * (4 - 0) = 2.5 ‚âà 2                (estimamos que est√° en el √≠ndice 2 o cerca)
                // pos = 0 + 2 = 2
                //
                // Verificamos arr[2] = 30. Como 35 > 30, buscamos a la derecha.

                int pos = low + ((target - arr[low]) * (high - low)) / (arr[high] - arr[low]);

                // Asegurarnos de que pos est√© dentro del rango v√°lido
                // (La aritm√©tica entera puede causar que pos salga del rango)
                if (pos < low) pos = low;
                if (pos > high) pos = high;

                if (VisualizationHelper.ShowStepByStep)
                {
                    Console.WriteLine($"\nüìç Estimando posici√≥n:");
                    Console.WriteLine($"   Rango: [{low}...{high}]  Valores: [{arr[low]}...{arr[high]}]");
                    Console.WriteLine($"   Buscando: {target}");
                    Console.WriteLine($"   Posici√≥n estimada: {pos} (valor: {arr[pos]})");
                    
                    // Mostrar el arreglo con la posici√≥n estimada resaltada
                    for (int i = 0; i < arr.Length; i++)
                    {
                        if (i == pos)
                        {
                            Console.ForegroundColor = ConsoleColor.Yellow;
                            Console.Write($"[{arr[i]}] ");
                            Console.ResetColor();
                        }
                        else if (i >= low && i <= high)
                        {
                            Console.Write($"{arr[i]} ");
                        }
                        else
                        {
                            Console.ForegroundColor = ConsoleColor.DarkGray;
                            Console.Write($"{arr[i]} ");
                            Console.ResetColor();
                        }
                    }
                    Console.WriteLine();
                    VisualizationHelper.WaitForUser();
                }

                // ========================================================================================
                // COMPARAR Y DECIDIR
                // ========================================================================================
                comparisons++;

                if (arr[pos] == target)
                {
                    // ¬°ENCONTRADO!
                    Console.WriteLine($"‚úì Encontrado en la posici√≥n {pos}");
                    Console.WriteLine($"üìä Comparaciones realizadas: {comparisons}");
                    return pos;
                }

                if (arr[pos] < target)
                {
                    // El elemento est√° a la DERECHA
                    // Ajustamos low para buscar en la mitad derecha
                    if (VisualizationHelper.ShowStepByStep)
                    {
                        Console.WriteLine($"   {arr[pos]} < {target} ‚Üí Buscar a la derecha");
                    }
                    low = pos + 1;
                }
                else
                {
                    // El elemento est√° a la IZQUIERDA
                    // Ajustamos high para buscar en la mitad izquierda
                    if (VisualizationHelper.ShowStepByStep)
                    {
                        Console.WriteLine($"   {arr[pos]} > {target} ‚Üí Buscar a la izquierda");
                    }
                    high = pos - 1;
                }
            }

            // Si salimos del bucle, el elemento no existe
            Console.WriteLine($"‚úó No encontrado. Comparaciones: {comparisons}");
            return -1;
        }
    }
}
